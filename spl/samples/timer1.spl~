alias cPID S0;
alias pSP S2;
alias cPCB S1;
alias nPCB S3;
alias nPID S4;
cPID = (PTBR - 1024) / 8;
cPCB = (READY_LIST + 32 * cPID);
[cPCB + 1] = 1;
[cPCB + 2] = BP;
[cPCB + 3] = SP-1;
pSP = ([PTBR + 2 * (SP / 512 )] + (SP % 512));
[cPCB + 4] = [pSP];
[cPCB + 5] = PTBR;
[cPCB + 6] = PTLR;
[cPCB + 7] = R0;
[cPCB + 8] = R1;
[cPCB + 9] = R2;
[cPCB + 10] = R3;
[cPCB + 11] = R4;
[cPCB + 12] = R5;
[cPCB + 13] = R6;
[cPCB + 14] = R7;
nPID = cPID + 1;
nPCB = cPCB + 32;
breakpoint;
while([nPCB + 1] != 1) do
	nPID = ((nPID + 1) % 32);
	nPCB = (READY_LIST + 32 * nPID);
endwhile;
BP = [nPCB + 2];
SP = [nPCB + 3];
PTBR = [nPCB + 5];
PTLR = [nPCB + 6];
R0 = [nPCB + 7];
R1 = [nPCB + 8];
R2 = [nPCB + 9];
R3 = [nPCB + 10];
R4 = [nPCB + 11];
R5 = [nPCB + 12];
R6 = [nPCB + 13];
R7 = [nPCB + 14];
SP = SP + 1;
alias npsp S6;
npsp = (([PTBR + 2 * (SP / 512)] * 512) + (SP % 512));
[npsp] = [nPCB + 4];
[nPCB + 1] = 2;
ireturn;
